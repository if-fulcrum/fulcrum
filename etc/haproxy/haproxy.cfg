# doing stuff without changing the config from the cli
# install socat with your package manager
# view the status page to see these commands take effect
# echo "help" | socat /run/haproxy-admin.sock -
# echo "disable server backend-default/varnish01" | socat /run/haproxy-admin.sock -
# echo "enable server backend-default/varnish01" | socat /run/haproxy-admin.sock -
# echo "show servers state" | socat /run/haproxy-admin.sock -
# while [ 1 -lt 2 ]; do echo "show table backend-default" | socat /run/haproxy-admin.sock - ; sleep 5; done

global
    stats socket /run/haproxy-admin.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

    # send syslog messages to the host 'rsyslog'
    ### log rsyslog syslog

    # https://mozilla.github.io/server-side-tls/ssl-config-generator/
    # https://cipherli.st
    # https://www.ssllabs.com/ssltest/
    # tls settings
    tune.ssl.default-dh-param 2048
    ssl-default-bind-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-bind-options no-sslv3 no-tls-tickets
    ssl-default-server-ciphers ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS
    ssl-default-server-options no-sslv3 no-tls-tickets

defaults
    default_backend backend-default
    log     global
    mode    http
    option  forwardfor
    option  httplog
    option  dontlognull
    timeout connect 5000
    timeout client  50000
    timeout server  50000

### FRONTEND START ###
frontend frontend-default
    bind *:80
    bind *:443 ssl crt /etc/certs.d alpn h2,http/1.1

    # Bind with the proxy protocol so we can sit behind AWS ELBs and let haproxy do the ssl termination, keep 80/443 bound so
    # servers with no elb still work fine.
    # Be sure ELBs are TCP mode having 80->81 and 443->444
    # https://github.com/jvehent/haproxy-aws
    bind *:81 accept-proxy
    bind *:444 accept-proxy ssl crt /etc/certs.d alpn h2,http/1.1

    # example of how to put a site into maintenance, sometime helpful for things like relaunching a site
    # acl example_maintenance hdr(host) -i www.example.com
    # use_backend backend-maintenance if example_maintenance

    # for free ssls, https://certbot.eff.org
    acl path_certbot path_beg /.well-known/acme-challenge
    use_backend backend-certbot if path_certbot

    # long running queries that need timeouts adjusted
    acl path_cron path_beg /cron/
    acl path_export_config path /admin/config/development/configuration/full/export-download
    use_backend backend-longrunning if path_cron
    use_backend backend-longrunning if path_export_config

    # these urls will go to public varnish and not need whitelisting of ips (exact url match)
    # acl path_varnishpublic hdr(host) -i dev.example.com
    # use_backend backend-varnishpublic if path_varnishpublic

    # these urls will bypass varnish and go directly to nginx/php (begins with url match)
    # acl path_personal_url hdr_beg(host) -i my.
    # use_backend backend-bypass-varnish if path_personal_url

    # https://www.haproxy.com/blog/haproxys-load-balancing-algorithm-for-static-content-delivery-with-varnish/
    # acl static_content path_end -i .css .doc .docx .gif .ico .jpg .js .json .map .mp4 .pdf .png .ppt .pptx .svg .ttf .woff .woff2 .xls .xlsx
    # use_backend backend-static-varnish if static_content
### FRONTEND END ###

### BACKEND START ###
backend backend-maintenance
    mode http
    errorfile 503 /etc/haproxy/errors/200_under_maintenance.http

backend backend-default

    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server varnish varnish:80 check port 80 send-proxy-v2

    # https://www.haproxy.com/blog/use-a-load-balancer-as-a-first-row-of-defense-against-ddos/
    # https://github.com/jvehent/haproxy-aws#automated-rate-limiting
    # http://cbonte.github.io/haproxy-dconv/1.6/configuration.html#4-stick-table
    # Define a table that will store IPs associated with counters
    # stick-table type ip size 500k expire 30s store conn_cur,conn_rate(10s),http_req_rate(10s),http_err_rate(10s)

    # Enable tracking of src IP in the stick-table
    # tcp-request content track-sc0 src

# backend backend-static-varnish
#     option http-server-close
#     http-request set-header X-Forwarded-Port %[dst_port]
#     http-request set-header X-Forwarded-Host %[req.hdr(Host)]
#     http-request add-header X-Forwarded-Proto https if { ssl_fc }
#     server varnishstatic varnishstatic:80 check port 80 send-proxy-v2

backend backend-certbot
    option http-server-close
    server certbot certbot:80 maxconn 50

backend backend-longrunning
    timeout server 500s
    option http-server-close
    http-request set-header X-Forwarded-Port %[dst_port]
    http-request set-header X-Forwarded-Host %[req.hdr(Host)]
    http-request add-header X-Forwarded-Proto https if { ssl_fc }
    server varnish varnish:80 check port 80 send-proxy-v2
### BACKEND END ###

### listen stats
###     # must come here with https
###     bind *:1936 ssl crt /etc/certs.d
###     stats enable
###     stats uri /
###     stats hide-version
###     stats auth UsEr:PaSsWoRd_CHANGE_ME

# ensure this is locked down by internal only access, this is for prometheus scrapers
listen stats # Define a listen section called "stats"
  bind :82 # Listen on localhost:9000
  mode http
  stats enable  # Enable stats page
  stats uri /haproxy_stats  # Stats URI
