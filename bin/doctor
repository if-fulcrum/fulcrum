#!/bin/bash
# set -x

FULCRUM_BINDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")"&&pwd)"
source ${FULCRUM_BINDIR}/lib/general

vout "Running doctor"

requireSudo

HINGECONFIGREPO=""
if [ -e /tmp/HINGECONFIGREPO ]; then
  HINGECONFIGREPO=$(cat /tmp/HINGECONFIGREPO)
fi

# allow for override in a custom doctor file
if [[ "$HINGECONFIGREPO" == "" && ! -e ${FULCRUM_DIRNAME}/var/fulcrum/hinge-config ]]; then
  # checkout sites repo
  HINGECONFIGREPODEFAULT=https://github.com/if-fulcrum/hinge-config.git

  vout "Your available public keys if custom repo needs them:"
  find ~/.ssh/*.pub -print -exec cat {} \;

  # TODO: this is breaking from running
  read -p "Please enter Fulcrum Hinge Config repo URL (default: $HINGECONFIGREPODEFAULT): " HINGECONFIGREPO

  if [ "$HINGECONFIGREPO" == "" ]; then
    HINGECONFIGREPO=$HINGECONFIGREPODEFAULT
  fi
fi

# allow choosing branch
HINGE_CONFIG_BRANCH="master"
if [ -e /tmp/HINGE_CONFIG_BRANCH ]; then
  HINGE_CONFIG_BRANCH=$(cat /tmp/FULCRUM_BRANCH)
fi

etcHosts 127.0.0.1 mariadb
etcHosts 127.0.0.1 redis

if [ ! -e $FULCRUM_DIRNAME/etc/varnish/internal.vcl ]; then
  echo 'acl internal  { "0.0.0.0"/0;  }' > $FULCRUM_DIRNAME/etc/varnish/internal.vcl
fi

if [ ! -e $FULCRUM_DIRNAME/etc/varnish/whitelist.vcl ]; then
  echo 'acl whitelist { "0.0.0.0"/0;  }' > $FULCRUM_DIRNAME/etc/varnish/whitelist.vcl
fi

if [ ! -e $FULCRUM_DIRNAME/etc/varnish/blacklist.vcl ]; then
  echo 'acl blacklist { "0.0.0.0"/32; }' > $FULCRUM_DIRNAME/etc/varnish/blacklist.vcl
fi

# make a minimal fulcrum_config.conf
if [ ! -e $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf ]; then
  cp $FULCRUM_DIRNAME/etc/fulcrum/nginx-fulcrum_config-blank.conf $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf
fi

# make a minimal fulcrum_phpversion.conf
if [ ! -e $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_phpversion.conf ]; then
  cp $FULCRUM_DIRNAME/etc/fulcrum/nginx-fulcrum_phpversion-blank.conf $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_phpversion.conf
fi

# copy blackfire template
if [ ! -e $FULCRUM_DIRNAME/etc/fulcrum/stack/env/blackfire.env ]; then
  cp $FULCRUM_DIRNAME/etc/fulcrum/stack/env/blackfire.env-template $FULCRUM_DIRNAME/etc/fulcrum/stack/env/blackfire.env
fi

# make mysql directory
if [ ! -d $FULCRUM_DIRNAME/var/lib/mysql ]; then
  mkdir $FULCRUM_DIRNAME/var/lib/mysql
fi

# set mysql perms
sudo chown -R 999:999 $FULCRUM_DIRNAME/var/lib/mysql
sudo chmod -R u+w,u+r $FULCRUM_DIRNAME/var/lib/mysql

# mysqldump config - https://serverfault.com/questions/912162/mysqldump-throws-unknown-table-column-statistics-in-information-schema-1109
MYCNF=~/.my.cnf
# no cnf file
if [ ! -e $MYCNF ]; then
  echo -e "[mysqldump]\ncolumn-statistics=0\n" | tee $MYCNF > /dev/null
# cnf file doesn't have mysqldump section
elif ( ! ( grep '[mysqldump]' $MYCNF > /dev/null ) ); then
  echo -e "\n[mysqldump]\ncolumn-statistics=0\n" | tee -a $MYCNF > /dev/null
# mysqldump section doesn't have column-statistics
elif [[ "$(egrep '\[mysqldump\]|column-statistics' $MYCNF|wc -l|xargs)" != "2" ]]; then
  sed -e $'s/\[mysqldump\]/\[mysqldump\]\\\ncolumn-statistics=0\\\n/' $MYCNF | tee $MYCNF > /dev/null
fi

# make elasticsearch directory
if [ ! -d $FULCRUM_DIRNAME/var/lib/elasticsearch ]; then
  sudo mkdir $FULCRUM_DIRNAME/var/lib/elasticsearch
fi

if [ ! -d $FULCRUM_DIRNAME/var/lib/elasticsearch7 ]; then
  sudo mkdir $FULCRUM_DIRNAME/var/lib/elasticsearch7
fi

# set elasticsearch perms
sudo chown -R 1000:0 $FULCRUM_DIRNAME/var/lib/elasticsearch
sudo chmod -R 770 $FULCRUM_DIRNAME/var/lib/elasticsearch
sudo chown -R 1000:0 $FULCRUM_DIRNAME/var/lib/elasticsearch7
sudo chmod -R 770 $FULCRUM_DIRNAME/var/lib/elasticsearch7

source $FULCRUM_DIRNAME/bin/lib/cli-autocomplete

# run OS (e.g, doctor-mac or doctor-lin)
if [ -e ${FULCRUM_BINDIR}/lib/doctor-$FULCRUM_OS_LC ]; then
  source ${FULCRUM_BINDIR}/lib/doctor-$FULCRUM_OS_LC

  # run distro doctor (e.g., doctor-ubuntu)
  if [ -n "$FULCRUM_OS_DISTRO" ]; then
    if [ -e ${FULCRUM_BINDIR}/lib/doctor-$FULCRUM_OS_DISTRO ]; then
      source ${FULCRUM_BINDIR}/lib/doctor-$FULCRUM_OS_DISTRO
    else
      eout "No distro doctor file to run, Fulcrum Hinge probably needs to be extended for $FULCRUM_OS_DISTRO"
    fi
  fi
else
  eout "No OS doctor file to run, Fulcrum Hinge probably needs to be extended for $FULCRUM_OS_LC"
fi

DRUSH8_DIR=$FULCRUM_DIRNAME/var/fulcrum/drush/drush8
DRUSH8_BIN=$DRUSH8_DIR/vendor/drush/drush/drush
DRUSH8_NEWISH="-1"

# if drush8 is installed, get the version
if [ -d $DRUSH8_DIR ]; then
  cd $DRUSH8_DIR

  DRUSH8_VER="$(composer show|grep drush/drush|perl -p -e 's#^drush/drush\s+(\d+\.\d+\.\d+).*#$1#')"
  DRUSH8_NEWISH=$(php -r "echo version_compare(\"$DRUSH8_VER\", \"8.3.3\");")
fi

# if drush8 doesn't exist or is too old then install/update
if [ "$DRUSH8_NEWISH" -lt "0" ]; then
  echo "Installing Drush 8"

  mkdir -p $DRUSH8_DIR

  cd $DRUSH8_DIR

  # PHP 7.3 has a known bug with pcre.jit
  php -d pcre.jit=0 $(which composer) require \
    "drush/drush:>=8.3.3 <9.0"                \
    "composer/semver:^1.0"                    \
    "pear/archive_tar:^1.4.9"                 \
    "psr/log:^1.0"                            \
    "symfony/console:~2.7|^3"                 \
    "symfony/debug:~2.8|~3.0"                 \
    "symfony/event-dispatcher:~2.7|^3"        \
    "symfony/filesystem:^2.7 || ^3.4"         \
    "symfony/finder:~2.7|^3"                  \
    "symfony/http-foundation:~3.4.35"         \
    "symfony/process:~2.7|^3"                 \
    "symfony/var-dumper:~2.7|^3"              \
    "symfony/yaml:~2.3|^3"                    \
    "twig/twig:^1.38.2"
fi

DRUSH10_DIR=$FULCRUM_DIRNAME/var/fulcrum/drush/drush10
if [ ! -f $DRUSH10_DIR/vendor/drush/drush/drush ]; then
  echo "Installing Drush 10"
  mkdir -p $DRUSH10_DIR

  cd $DRUSH10_DIR

  # PHP 7.3 has a known bug with pcre.jit
  php -d pcre.jit=0 $(which composer) require \
    "drush/drush:10.*"                        \
    "composer/semver:^1.0"                    \
    "pear/archive_tar:^1.4.9"                 \
    "psr/log:^1.0"                            \
    "symfony/console:~2.7|^3"                 \
    "symfony/debug:~2.8|~3.0"                 \
    "symfony/event-dispatcher:~2.7|^3"        \
    "symfony/filesystem:^2.7 || ^3.4"         \
    "symfony/finder:~2.7|^3"                  \
    "symfony/http-foundation:~3.4.35"         \
    "symfony/process:~2.7|^3"                 \
    "symfony/var-dumper:~2.7|^3"              \
    "symfony/yaml:~2.3|^3"                    \
    "twig/twig:^1.38.2"
fi

# set the resolver IP for nginx
echo "resolver $FULCRUM_HOST_IP valid=300s;" > $FULCRUM_DIRNAME/var/fulcrum/nginx/resolver.conf

# secret needs to be made *after* docker has been installed
varnishSecret > /dev/null

# clonge out the fulcrum hinge config repo
if [ ! -e ${FULCRUM_DIRNAME}/var/fulcrum/hinge-config ]; then
  git -C ${FULCRUM_DIRNAME}/var/fulcrum clone -b $HINGE_CONFIG_BRANCH $HINGECONFIGREPO hinge-config
fi

# run the custom doctor if it exists
if [ -e ${FULCRUM_DIRNAME}/var/fulcrum/hinge-config/bin/lib/doctor-custom ]; then
  source ${FULCRUM_DIRNAME}/var/fulcrum/hinge-config/bin/lib/doctor-custom
fi

if [ ! -e /tmp/HINGEINSTALLING ]; then
  # clean up config
  if [ -e /tmp/HINGECONFIGREPO ]; then
    rm /tmp/HINGECONFIGREPO
  fi
fi

# put default hinge settings in place
if [ ! -f ~/.fulcrum-hinge ]; then
  cp ${FULCRUM_DIRNAME}/etc/fulcrum/hinge-example-settings ~/.fulcrum-hinge
fi

# php 7 opcache default to on
if [ ! -e ${FULCRUM_DIRNAME}/etc/php7/conf.d/zz-opcache-overide.ini ]; then
  echo "opcache.enable=1" > ${FULCRUM_DIRNAME}/etc/php7/conf.d/zz-opcache-overide.ini
fi

# php 7 xdebug default to off
if [ ! -e ${FULCRUM_DIRNAME}/etc/php7/conf.d/zz-xdebug-overide.ini ]; then
  cp $FULCRUM_DIRNAME/etc/php7xdebug/conf.d/zz-xdebug-off.ini $FULCRUM_DIRNAME/etc/php7/conf.d/zz-xdebug-overide.ini
fi

# add 99_fulcrum.ini so drush can use it
SCAN_DIR=$(php -r 'echo PHP_CONFIG_FILE_SCAN_DIR;')

if ( ! touch $SCAN_DIR/99_fulcrum.ini ); then
  sudo chown -R $(id -u) $SCAN_DIR
fi

echo "auto_prepend_file=${FULCRUM_DIRNAME}/etc/fulcrum/php/fulcrum.php" > $SCAN_DIR/99_fulcrum.ini
