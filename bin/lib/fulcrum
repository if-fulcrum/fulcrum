#!/bin/bash

source ${FULCRUM_BINDIR}/lib/general

function usage() {
  echo "Example Usage: "
  echo " -d  Don't run doctor"
  echo " -h  Help"
  echo " -n  No docker pull (default)"
  echo " -p  Do docker pull (update your images)"
  echo " -q  quiet"
  echo " -s  sudo - if you cannot run 'docker' without sudo, pass this flag"
  echo " -v  verbose (debug)"
  echo " -x  turn 'set -x' on (deep debug)"
  echo ""
  echo "up             - restart all containers, also use to start them [start] [restart] [reload]"
  echo "stop           - stop all containers and remove them [stop] [halt] [down] [shutdown]"
  echo "sh             - step inside a running container [sh] [bash] [shell] [enter] [dsh] [dbash]"
  echo "ps             - show containers (running or stopped) [dps]"
  echo "log            - show logs being put out from containers, ctrl+C to stop following [log] [logs] [dlog] [dlogs]"
  echo "haproxyrestart - restart haproxy, for when modifying the config [haproxy] [haproxy-restart]"
  echo "varnishrestart - restart varnish, for when modifying the config [varnish] [varnish-restart]"
  echo "varnishcc      - varnish clear cache, for dumping the whole varnish cache [varnishclearcache] [varnish-clearcache]"
  echo "conf           - regenerate nginx .conf file from json [nginx] [nginx-restart]"
  echo "ocfl           - flush Zend OPcache [opcacheflush]"
  echo "ocof           - disable Zend OPcache [ocoff] [opcacheoff]"
  echo "ocon           - enable Zend OPcache [opcacheon]"
  echo "ocst           - status of Zend OPcache [opcachestatus]"
  echo "etch           - add a 127.0.0.1 host to etc/hosts [etchost] [etchosts]"
  echo "rnd            - create a random string, will be prompted for length [rand] [random] [randomstr]"
  echo "sc             - create a self-signed HTTPS certificate [signcert]"
  echo "fs             - force HTTPS via base_url [forcehttps]"
  echo "ac             - add drupal cron entry for a site [addcron]"
  echo "rc             - remake certs [remakecerts]"
  echo "xof            - disable xdebug [xoff] [xdebugoff]"
  echo "xon            - enable xdebug [xdebugon]"
  echo "xst            - status of xdebug [xdebugstatus]"
  echo "lt             - update fulcrum and hinge-config to latest [latest]"
  echo ""
  echo "This requires Docker for Mac or Windows, please get the stable version from https://docs.docker.com/"
  echo ""
  echo ""
  echo "port :4433 bypasses the varnish layer"
  echo "port :5433 bypasses the varnish layer and enables the xdebug php container"
  echo ""
  exit 0
}

# show container status
function dps() {
  $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" ps
  exit 0
}

# show container logs
function dlogs() {
  sendalert "We are following the logs of the containers, Ctrl+C to stop"
  $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" logs -f
  exit 0
}

function stopAllContainers() {
  $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" stop
}

function rmAllContainers() {
  $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" rm -f
}

function stopAndRmAllContainers() {
  stopAllContainers

  rmAllContainers
}

function dstop() {
  stopAndRmAllContainers
}

function dpull() {
  vout "doing docker pull"
  sendalert "doing docker pull, if you get an error about \"TLS handshake timeout\", then re-run this same command again"
  $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" pull
  $SUDOCK docker pull fulcrum/util
}

# start/restart all our containers
function drestart() {
  stopAndRmAllContainers

  stackExports

  if [ $DOPULL -eq 1 ]; then
    dpull
  else
    vout "skipping docker pull"
    sendalert "skipping docker image pull, add -p flag if you wish to pull next time"
  fi

  vout "starting containers"
  sendalert "Starting containers"
  if [ $QUIET -eq 1 ]; then
    vout "quiet docker-compose up"
    $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" up -d 1>/dev/null 2>/dev/null
  else
    vout "verbose docker-compose up"
    $SUDOCK /usr/local/bin/docker-compose --file "${FULCRUM_COMPOSE_YML}" up -d
  fi

  waitForDB

  # spin up config sites if it exists
  if [ -e ${FULCRUM_DIRNAME}/var/fulcrum/hinge-config/bin/lib/doctor-sites ]; then
    source ${FULCRUM_DIRNAME}/var/fulcrum/hinge-config/bin/lib/doctor-sites
  fi
}

# mariadb has a ready for connections twice,
# so we have to wait until there is only 1 root user
# until everything is setup and we can use it
function waitForDB() {
  MY_CMD="$SUDOCK docker exec mariadb mysql -u root --protocol socket"
  echo -n "Waiting until database is available on local container socket..."
  while ! $MY_CMD -e "show databases;" > /dev/null 2>&1 ; do
    echo -n "."
    sleep .25
  done

  echo "ready"

  DEFAULT_ROUTE_IP=$(docker exec -it mariadb /sbin/ip route|grep default|cut -d' ' -f3)
  
  echo -n "Seeing if proper root perms exist for docker localhost connection: "
  PROPER_ROOT=$($MY_CMD -Ne "SELECT user FROM mysql.user where user='root' and host='127.0.0.1';")

  if [[ "$PROPER_ROOT" == "" ]]; then
    echo "no - making proper root perms"
    $MY_CMD -e "CREATE USER root@'127.0.0.1' IDENTIFIED BY '';GRANT ALL ON *.* to root@'127.0.0.1' IDENTIFIED BY '' WITH GRANT OPTION;FLUSH PRIVILEGES;"
  else
    echo "yes"
  fi

  echo -n "Seeing if proper root perms exist for docker host connection: "
  PROPER_ROOT=$($MY_CMD -Ne "SELECT user FROM mysql.user where user='root' and host='$DEFAULT_ROUTE_IP';")

  if [[ "$PROPER_ROOT" == "" ]]; then
    echo "no - making proper root perms"
    $MY_CMD -e "CREATE USER root@'$DEFAULT_ROUTE_IP' IDENTIFIED BY '';GRANT ALL ON *.* to root@'$DEFAULT_ROUTE_IP' IDENTIFIED BY '' WITH GRANT OPTION;FLUSH PRIVILEGES;"
  else
    echo "yes"
  fi

  echo -n "Waiting until database is available to docker host on default port..."
  while ! mysql -h 127.0.0.1 -u root -e "show databases;" > /dev/null 2>&1 ; do
    echo -n "."
    sleep .25
  done

  echo "ready"
}

# step into docker container
function dbash() {
  FULCRUM_OS_INT_PREFIX=""
  if [[ "$FULCRUM_OS" == "WIN" ]]; then
    FULCRUM_OS_INT_PREFIX="winpty "
  fi

  DOCKER_IMAGES=$($SUDOCK docker ps --format '{{.Names}}' | sort | awk '{ print FNR " " $0 }')
  echo "$DOCKER_IMAGES"
  read -p "Please enter container number to enter: " MYNUMBER
  ENTER_IMAGE=$(echo "$DOCKER_IMAGES" | awk -v MYNUMBER=${MYNUMBER} '$1 == MYNUMBER { print $2 }')

  echo "${ENTER_IMAGE}"
  # https://github.com/docker/docker/issues/9299
  $SUDOCK $FULCRUM_OS_INT_PREFIX docker exec -it ${ENTER_IMAGE} sh -c "export TERM=xterm; exec sh"
}

function _phpReloadConf() {
  CONT=php7.3
  if [ "$(docker container inspect -f '{{.State.Status}}' $CONT 2> /dev/null)" == "running" ]; then
    $SUDOCK docker exec $CONT sh -c 'kill -USR2 1'
  fi
 
  CONT=php7.4
  if [ "$(docker container inspect -f '{{.State.Status}}' $CONT 2> /dev/null)" == "running" ]; then
    $SUDOCK docker exec $CONT sh -c 'kill -USR2 1'
  fi
}

function phpReloadConf() {
  vout "Reload php configs"
  stackStatus "noexit"
  _phpReloadConf
}

function opcacheFlush() {
  vout "Flush Zend OPcache"
  _phpReloadConf
}

function opcacheOff() {
  vout "Disable Zend OPcache"
  echo "opcache.enable=0" > $FULCRUM_DIRNAME/etc/php7.3/conf.d/zz-opcache-overide.ini
  echo "opcache.enable=0" > $FULCRUM_DIRNAME/etc/php7.4/php/conf.d/zz-opcache-overide.ini
  phpReloadConf
  opcacheStatus
}

function opcacheOn() {
  vout "Enable Zend OPcache"
  echo "opcache.enable=1" > $FULCRUM_DIRNAME/etc/php7.3/conf.d/zz-opcache-overide.ini
  echo "opcache.enable=1" > $FULCRUM_DIRNAME/etc/php7.4/php/conf.d/zz-opcache-overide.ini
  phpReloadConf
  opcacheStatus
}

function opcacheStatus() {
  OCMODE=$(cat $FULCRUM_DIRNAME/etc/php7.3/conf.d/zz-opcache-overide.ini)

  if [[ "$OCMODE" == *"opcache.enable=1"* ]]; then
    vout "PHP 7.3 Zend OPcache status appears to be *enabled* ($OCMODE)"
  elif [[ "$OCMODE" == *"opcache.enable=0"* ]]; then
    vout "PHP 7.3 Zend OPcache status appears to be *disabled* ($OCMODE)"
  else
    vout "PHP 7.3 Zend OPcache status is unknown ($OCMODE)"
  fi

  OCMODE=$(cat $FULCRUM_DIRNAME/etc/php7.4/php/conf.d/zz-opcache-overide.ini)

  if [[ "$OCMODE" == *"opcache.enable=1"* ]]; then
    vout "PHP 7.4 Zend OPcache status appears to be *enabled* ($OCMODE)"
  elif [[ "$OCMODE" == *"opcache.enable=0"* ]]; then
    vout "PHP 7.4 Zend OPcache status appears to be *disabled* ($OCMODE)"
  else
    vout "PHP 7.4 Zend OPcache status is unknown ($OCMODE)"
  fi
}

function xdebugOff() {
  vout "Disable Xdebug"
  cp $FULCRUM_DIRNAME/etc/php7xdebug/conf.d/zz-xdebug-off.ini $FULCRUM_DIRNAME/etc/php7.3/conf.d/zz-xdebug-overide.ini
  cp $FULCRUM_DIRNAME/etc/php7xdebug/conf.d/zz-xdebug-off.ini $FULCRUM_DIRNAME/etc/php7.4/php/conf.d/zz-xdebug-overide.ini
  phpReloadConf
  xdebugStatus
}

function xdebugOn() {
  vout "Enable Xdebug"

  cat $FULCRUM_DIRNAME/etc/php7xdebug/conf.d/zz-xdebug-on.ini|sed 's/PHP_FPM_PORT/9073/' > $FULCRUM_DIRNAME/etc/php7.3/conf.d/zz-xdebug-overide.ini
  cat $FULCRUM_DIRNAME/etc/php7xdebug/conf.d/zz-xdebug-on.ini|sed 's/PHP_FPM_PORT/9074/' > $FULCRUM_DIRNAME/etc/php7.4/php/conf.d/zz-xdebug-overide.ini

  phpReloadConf
  xdebugStatus
}

function xdebugStatus() {
  OCMODE=$(cat $FULCRUM_DIRNAME/etc/php7.3/conf.d/zz-xdebug-overide.ini)

  if [[ "$OCMODE" == *"xdebug.so"* ]]; then
    vout "PHP 7.3 Xdebug status appears to be *enabled*"
  else
    vout "PHP 7.3 Xdebug status appears to be *disabled*"
  fi

  OCMODE=$(cat $FULCRUM_DIRNAME/etc/php7.4/php/conf.d/zz-xdebug-overide.ini)

  if [[ "$OCMODE" == *"xdebug.so"* ]]; then
    vout "PHP 7.4 Xdebug status appears to be *enabled*"
  else
    vout "PHP 7.4 Xdebug status appears to be *disabled*"
  fi
}

function etcHosts127() {
  read -p "Please enter hostname your would like to map to 127.0.0.1: " ETCHOST
  etcHosts 127.0.0.1 $ETCHOST
}

function rndStrInput() {
  read -p "Please enter the number random characters: " CHARCOUNT
  rndStr $CHARCOUNT
}

function forcehttps() {
  # see if we were given a domain
  DOMAIN=${1:-""}

  # ask if we didn't fine a domain
  if [ -z "$DOMAIN" ]; then
    read -p "Please enter hostname your would like force https: " DOMAIN
  fi

  CONF_FILE=$FULCRUM_DIRNAME/etc/fulcrum/conf/$DOMAIN.json
  if [ ! -e $CONF_FILE ]; then
    eout "Cannot find $DOMAIN ($CONF_FILE)"
  fi

  # remove any previous base_url
  grep -v force_https $CONF_FILE | grep -v base_url > $CONF_FILE.bak

  # add in force_https
  perl -p -i -e "s#(webroot.*?,)#\$1\\n  \"force_https\" : \"true\",#" $CONF_FILE.bak

  # add in base_url
  perl -p -i -e "s#(replace.*?$)#\$1\\n      \"base_url\" : \"https://$DOMAIN\",#" $CONF_FILE.bak

  mv $CONF_FILE.bak $CONF_FILE

  nginxConfAll

  opcacheFlush
}

# my most embarrassing kludge ever....
# this will be replace when we make a varnish purge/ban director/repeater
function stackExports() {
  FULCRUM_INI="$FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini"

  FULCRUM_VARNISH_01=varnish01
  FULCRUM_VARNISH_02=varnish02
  FULCRUM_VARNISH_03=varnish03
  FULCRUM_VARNISH_04=varnish04
  FULCRUM_VARNISH_05=varnish05
  FULCRUM_VARNISH_06=varnish06
  FULCRUM_VARNISH_07=varnish07
  FULCRUM_VARNISH_08=varnish08
  FULCRUM_VARNISH_09=varnish09

  # if $FULCRUM_INI exists or varnish_host_01 exist in $FULCRUM_INI
  if [ -e "$FULCRUM_INI" ]; then
    if $(grep varnish_host_01 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_01=$(awk -F "=" '/varnish_host_01/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_02 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_02=$(awk -F "=" '/varnish_host_02/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_03 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_03=$(awk -F "=" '/varnish_host_03/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_04 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_04=$(awk -F "=" '/varnish_host_04/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_05 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_05=$(awk -F "=" '/varnish_host_05/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_06 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_06=$(awk -F "=" '/varnish_host_06/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_07 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_07=$(awk -F "=" '/varnish_host_07/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_08 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_08=$(awk -F "=" '/varnish_host_08/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi

    if $(grep varnish_host_09 $FULCRUM_INI > /dev/null 2>&1); then
      FULCRUM_VARNISH_09=$(awk -F "=" '/varnish_host_09/ {print $2}' $FULCRUM_DIRNAME/etc/fulcrum/fulcrum.ini|tr -d ' ')
    fi
  fi

  export FULCRUM_VARNISH_01
  export FULCRUM_VARNISH_02
  export FULCRUM_VARNISH_03
  export FULCRUM_VARNISH_04
  export FULCRUM_VARNISH_05
  export FULCRUM_VARNISH_06
  export FULCRUM_VARNISH_07
  export FULCRUM_VARNISH_08
  export FULCRUM_VARNISH_09
}

function addCron() {
  # see if we were given a domain
  FULCRUM_SITE=${1:-""}

  # ask if we didn't fine a domain
  if [ -z "$FULCRUM_SITE" ]; then
    read -p "Please enter site you would like to add to cron: " FULCRUM_SITE
  fi

  SCHEME=http
  CRON_PORT=80
  CONF_FILE=$FULCRUM_DIRNAME/etc/fulcrum/conf/$FULCRUM_SITE.json
  FULCRUM_REPODIR=$FULCRUM_DIRNAME/sites/$FULCRUM_SITE
  FULCRUM_DOCROOT=$FULCRUM_REPODIR

  if [ ! -e $CONF_FILE ]; then
    eout "Config file not found!"
  else
    if [ -d $FULCRUM_DOCROOT/docroot ]; then
      FULCRUM_WRD=/docroot
    else
      FULCRUM_WRD=""
    fi

    FULCRUM_DOCROOT=$FULCRUM_REPODIR$FULCRUM_WRD

    drupalVersion

    cd $FULCRUM_DOCROOT

    if $(grep force_https $CONF_FILE > /dev/null 2>&1); then
      SCHEME=https
      CRON_PORT=443
    fi

    if [[ "$DRUPAL_MAJOR_VERSION" = "7" ]]; then
      CRON_URL="$SCHEME://$FULCRUM_SITE/cron.php?cron_key=$(drush vget --exact --format=string cron_key)"
    elif [[ "$DRUPAL_MAJOR_VERSION" = "8" ]]; then
      CRON_URL="$SCHEME://$FULCRUM_SITE/cron/$(drush sget --format=string system.cron_key)"
    else
      eout "Must be Drupal 7 or 8"
    fi

    CRON_ETC_DIR=$FULCRUM_DIRNAME/etc/fulcrum/cron
    CRON_FILE=$CRON_ETC_DIR/periodic/01min/${FULCRUM_SITE//"."/"_"}

    vout "$CRON_FILE:"
    echo -en "#!/bin/sh\n\nHOST_IP=\$(/sbin/ip route|awk '/default/ {print \$3}')\n\ncurl -s -k --resolve $FULCRUM_SITE:$CRON_PORT:\$HOST_IP $CRON_URL\n" | tee $CRON_FILE

    chmod +x $CRON_FILE
  fi
}

function remakeCerts() {
  echo -n "Enter top level domain of certs to delete? (e.g. .local): "
  read TLD </dev/tty

  CERTS=$(echo $(sudo security find-certificate -c $TLD -Z -a |egrep 'SHA-1 hash|alis')|tr ':' '\n'|grep alis|cut -d\" -f1,4|sed 's/ //g'|tr '"' ' '|sort -u)

  while read -r CERT; do
    SHA=$(echo "$CERT"|cut -f1 -d" ")
    CERT_DOMAIN=$(echo "$CERT"|cut -f2 -d" ")

    if [ -n "$CERT" ]; then
      echo -n "Delete and remake certificate for \"$CERT_DOMAIN\"? (y/n): "
      read DELETE </dev/tty

      if [ "$DELETE" == "y" ]; then
        echo "deleting $CERT_DOMAIN"
        sudo security delete-certificate -Z $SHA

        signCert $CERT_DOMAIN
      fi
    else
      echo "No matching certs"
    fi
  done <<< "$CERTS"
}

function fulcrumLastest() {
  vout "Updating Fulcrum and Hinge-Config to latest commit"
  cd $FULCRUM_DIRNAME
  git pull --ff-only
  cd $FULCRUM_DIRNAME/var/fulcrum/hinge-config
  git pull --ff-only
}
