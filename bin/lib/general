#!/bin/bash

# set -x

FULCRUM_DIRNAME=$(dirname $FULCRUM_BINDIR)

UNAMEA=$(uname -a)
FULCRUM_OS=UNK
FULCRUM_ETC_HOSTS=/etc/hosts
FULCRUM_OS_DISTRO=""
FULCRUM_HOME_DC=""

if [[ "$UNAMEA" == *"Darwin"* ]]; then
  FULCRUM_OS=MAC

  # make macOS 10.15 compatible
  if [[ -d /System/Volumes/Data$HOME ]]; then
    export FULCRUM_HOME_DC=/System/Volumes/Data$HOME
  else
    export FULCRUM_HOME_DC=$HOME
  fi
elif [[ "$UNAMEA" == *"MINGW64"* ]]; then
  FULCRUM_OS=WIN
  FULCRUM_ETC_HOSTS=/c/windows/system32/drivers/etc/hosts
elif [[ "$UNAMEA" == *"Linux"* ]]; then
  FULCRUM_OS=LIN

  if [ -e /etc/os-release ]; then
    source /etc/os-release

    FULCRUM_OS_DISTRO=$(echo $ID|tr '[:upper:]' '[:lower:]'|tr ' ' '-')
  fi
  export FULCRUM_HOME_DC=$HOME
fi

FULCRUM_OS_LC=$(echo $FULCRUM_OS|tr '[:upper:]' '[:lower:]')

function dout() {
  if [ ${VERBOSE} -eq 1 ]; then
    echo "DEBUG: $1"
  fi
}

function vout() {
  echo "[hinge] $1"
}

function eout() {
  echo "******************"
  echo "[hinge] $1"
  echo "******************"
  exit 1
}

function die() {
  local frame=0
  while caller $frame; do
    ((frame++));
  done
  echo "$*"
  exit 1
}

function now() {
  echo date +"%Y%m%d%H%M%S"
}

function dialog() {
  osascript -e 'on run args
  try
  tell app "SystemUIServer" to display dialog (item 1 of args)
  end
  activate app (path to frontmost application as text)
  end' "$1"
}

function sudoDockerNeeded() {
  if $(docker ps > /dev/null 2>&1); then
    SUDOCK=""
  else
    SUDOCK="sudo -E "
  fi

  export SUDOCK
  # echo "SUDOCK = $SUDOCK"
}

function requireSudo() {
  # TODO: !!! should check OS

  # see if sudo is needed
  if (which sudo > /dev/null) && ! $(sudo -n cat /dev/null > /dev/null 2>&1); then
    # get sudo first so the focus for the password is kept in the term, instead of Docker.app
    vout "You will need to provide your user password."
    sudo cat /dev/null
  fi
}

# make a new varnish/secret
function varnishSecret() {
  sudoDockerNeeded

  if [ ! -e $FULCRUM_DIRNAME/etc/varnish/secret ]; then
    # file should have a newline
    FULCRUM_VARN_SECRET=$(rndStr 32)
    echo "$FULCRUM_VARN_SECRET" > $FULCRUM_DIRNAME/etc/varnish/secret
  else
    # variable should not have a newline
    FULCRUM_VARN_SECRET=$(cat $FULCRUM_DIRNAME/etc/varnish/secret|tr -d '\n')
  fi

  echo -n "$FULCRUM_VARN_SECRET"
}

function waitForDocker() {
  (>&2 echo -n "Waiting until Docker is running.")

  while ! $($SUDOCK docker run --rm hello-world > /dev/null 2>&1); do
    (>&2 echo -n ".")
    sleep 0.25
  done

  (>&2 echo -e "\n")
}

function rndStr() {
  STR=$($SUDOCK docker run --rm fulcrum/util //fulcrum/bin/rndstr $1)
  echo $STR
}

function sendalert() {
  if [ ${QUIET} -eq 0 ]; then
    echo "$1"
  fi
}

function etcHosts() {
  ETC_HOSTS_IP=$1
  ETC_HOSTS_HOST=$2

  if ! $(egrep "^$ETC_HOSTS_IP\s+$ETC_HOSTS_HOST" $FULCRUM_ETC_HOSTS > /dev/null 2>&1); then
    vout "Adding $ETC_HOSTS_IP $ETC_HOSTS_HOST to $FULCRUM_ETC_HOSTS"

    if [[ "$FULCRUM_OS" == "WIN" ]]; then
      $FULCRUM_BINDIR/win/elevate_x64 $FULCRUM_BINDIR/win/addHost $ETC_HOSTS_HOST
    else
      echo -e "\n$ETC_HOSTS_IP $ETC_HOSTS_HOST\n" | sudo tee -a /etc/hosts
    fi
  else
    vout "Already exists in $FULCRUM_ETC_HOSTS: $ETC_HOSTS_IP $ETC_HOSTS_HOST"
  fi
}

function getDCYML() {
  DUMMYVAR="DUMMYVAL"

  # allow for override in a custom doctor file
  if [ -z ${FULCRUM_COMPOSE_YML+DUMMYVAR} ]; then
    # must come after FULCRUM_HOST_USER
    FULCRUM_COMPOSE_YML="$FULCRUM_DIRNAME/var/fulcrum/hinge-config/etc/fulcrum/stack/hinge-${FULCRUM_OS_LC}.yml"
    echo "Using $FULCRUM_COMPOSE_YML for Docker Compose"
  fi

  export FULCRUM_COMPOSE_YML
}

function nginxConfAll() {
  CONFDIR=$FULCRUM_DIRNAME/etc/fulcrum/conf/

  vout "searching for config files at $CONFDIR"

  count=`ls -1 $CONFDIR/*.json 2>/dev/null | wc -l`
  if [ $count == 0 ]; then
    eout "no config files found at $CONFDIR/*.json"
  fi

  # get all the aliases if there are any
  ALIASES='{}'
  if [ -e $CONFDIR/aliases.json ]; then
    vout "$CONFDIR/aliases.json file found, loading"
    ALIASES=$(cat $CONFDIR/aliases.json)
  else
    vout "no $CONFDIR/aliases.json file found, skipping alias loading"
  fi

  # combine all sites seperated by a comma into a single var
  SITES=$(
    for f in $CONFDIR/*.json;do
      if [[ "$f" != "$CONFDIR/aliases.json" ]]; then
        cat $f;echo ",";
      fi
    done
  )

  # combine aliases and sites, remove last comma & enclose in brackets for sites
  CONF="{\"aliases\":$ALIASES,\"sites\":[${SITES%?}]}"

  # overwrite fulcrum_config.conf, keep the double slashes for windows support
  vout "writing final nginx config to $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf"
  if [ -e $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf ]; then
    vout "fixing ownership of $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf to $FULCRUM_HOST_USER"
    $SUDOCK chown $FULCRUM_HOST_USER $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf
  fi
  echo "$CONF"|($SUDOCK docker run --rm -i fulcrum/util node //fulcrum/node/fulcrumConfs.js)>$FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_config.conf

  # set php version
  if [ ! -f $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_phpversion.conf ]; then
    $SUDOCK cp -a $FULCRUM_DIRNAME/etc/fulcrum/nginx-fulcrum_phpversion-blank.conf $FULCRUM_DIRNAME/etc/nginx/fulcrum/fulcrum_phpversion.conf
  fi

  # ensure we have no syntax errors
  $SUDOCK docker exec nginx /usr/sbin/nginx -t -c /etc/nginx/nginx.conf 1>/dev/null 2>/dev/null

  if [ $? -gt 0 ]; then
    echo "FATAL: syntax error in nginx config it seems, quitting without restart"
    exit 1
  fi

  stackStatus "noexit"

  getDCYML

  vout "FULCRUM_COMPOSE_YML: $FULCRUM_COMPOSE_YML"
  vout "FULCRUM_DIRNAME:     $FULCRUM_DIRNAME"
  vout "FULCRUM_OS_LC:       $FULCRUM_OS_LC"

  vout "recreating nginx container for new config"
  $SUDOCK docker stop nginx
  $SUDOCK docker rm nginx
  $SUDOCK docker-compose --file "${FULCRUM_COMPOSE_YML}" up -d nginx
}

function signCert() {
  CERT_DOMAIN=$1
  if [ -z "$CERT_DOMAIN" ]; then
    read -p "Please enter domain name for the cert to sign: " CERT_DOMAIN
  fi

  requireSudo

  vout "Creating self signed certificate for '$CERT_DOMAIN'"
  TMP_DIR=/tmp/fulcrum-cert-$CERT_DOMAIN-$$

  if [ -e /usr/local/etc/openssl/openssl.cnf ]; then
    SSLCONF=/usr/local/etc/openssl/openssl.cnf
  elif [ -e /etc/ssl/openssl.cnf ]; then
    SSLCONF=/etc/ssl/openssl.cnf
  else
    eout "Cannot find SSL configuration file"
    exit 1
  fi

  vout "Making temp directory $TMP_DIR"
  mkdir $TMP_DIR

  # vout "Making private key"
  # openssl genrsa -des3 -passout pass:x -out $TMP_DIR/$CERT_DOMAIN.pass.key 2048
  # openssl rsa -passin pass:x -in $TMP_DIR/$CERT_DOMAIN.pass.key -out $TMP_DIR/$CERT_DOMAIN.key
  #
  # vout "Making the cert signing request"
  # openssl req -new -key $TMP_DIR/$CERT_DOMAIN.key -out $TMP_DIR/$CERT_DOMAIN.csr -subj "/C=US/ST=Anywhere/L=Nowwhere/O=Fulcrum Inc/OU=Fulcrum Hinge/CN=$CERT_DOMAIN"
  #
  # vout "Making the actual cert"
  # openssl x509 -req -sha256 -days 3652 -in $TMP_DIR/$CERT_DOMAIN.csr -signkey $TMP_DIR/$CERT_DOMAIN.key -out $TMP_DIR/$CERT_DOMAIN.crt

  vout "Making private key and cert"
  openssl req \
    -newkey rsa:4096 \
    -x509 \
    -nodes \
    -keyout $TMP_DIR/$CERT_DOMAIN.key \
    -out $TMP_DIR/$CERT_DOMAIN.crt \
    -subj "/C=US/ST=Anywhere/L=Nowwhere/O=Fulcrum Inc/OU=Fulcrum Hinge/CN=$CERT_DOMAIN" \
    -reqexts SAN \
    -extensions SAN \
    -days 3652 \
    -config <(cat $SSLCONF \
      <(echo -e "\n\n[SAN]\nsubjectAltName=DNS:$CERT_DOMAIN"))

  if [ "$FULCRUM_OS" = "MAC" ]; then
    vout "Adding to the Mac keychain"
    sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain $TMP_DIR/$CERT_DOMAIN.crt
  elif [ "$FULCRUM_OS" = "LIN" ]; then
    vout "Adding to the system trusted certs"
    sudo mkdir -p /usr/local/share/ca-certificates/fulcrum

    sudo cp $TMP_DIR/$CERT_DOMAIN.crt /usr/local/share/ca-certificates/fulcrum/$CERT_DOMAIN.crt

    sudo chmod 755 /usr/local/share/ca-certificates/fulcrum
    sudo chmod 644 /usr/local/share/ca-certificates/fulcrum/*

    sudo update-ca-certificates

    # add to chrome if exists
    if [ -d $HOME/.pki/nssdb ]; then
      echo "Adding to Chrome"
      certutil -d sql:$HOME/.pki/nssdb -A -t "P,," -n $CERT_DOMAIN -i /usr/local/share/ca-certificates/fulcrum/$CERT_DOMAIN.crt

      # this should work for FF but doesn't
      # certutil -d ~/.mozilla/firefox/urzg1dtq.default -n $CERT_DOMAIN -A -t C -i /usr/local/share/ca-certificates/fulcrum/$CERT_DOMAIN.crt
    fi
  fi

  vout "Making combined PEM file for HAProxy"
  cat $TMP_DIR/$CERT_DOMAIN.key $TMP_DIR/$CERT_DOMAIN.crt > $FULCRUM_DIRNAME/etc/certs.d/$CERT_DOMAIN.pem

  vout "Restarting HAProxy to read the new certs"
  haproxyrestart

  vout "Removing directory $TMP_DIR"
  rm -vrf $TMP_DIR
}

function stackStatus() {
  EXIT_ON_ISSUE=${1:-exit}
  RUNNING_CONTAINERS=$($SUDOCK docker ps --format '{{.Names}}')
  STACK_STATUS=""
  SEVERITY="ERROR"

  if [[ "$EXIT_ON_ISSUE" != "exit" ]]; then
    SEVERITY="WARNING"
  fi

  if [[ "$RUNNING_CONTAINERS" != *"dnsmasq"* ]]; then
    STACK_STATUS="${STACK_STATUS}${SEVERITY}: dnsmasq not running\n"
  fi

  if [[ "$RUNNING_CONTAINERS" != *"haproxy"* ]]; then
    STACK_STATUS="${STACK_STATUS}${SEVERITY}: haproxy not running\n"
  fi

  if [[ "$RUNNING_CONTAINERS" != *"varnish"* ]]; then
    STACK_STATUS="${STACK_STATUS}${SEVERITY}: varnish not running\n"
  fi

  # if [[ "$RUNNING_CONTAINERS" != *"varnishstatic"* ]]; then
  #   STACK_STATUS="${STACK_STATUS}${SEVERITY}: varnishstatic static not running\n"
  # fi

  if [[ "$RUNNING_CONTAINERS" != *"nginx"* ]]; then
    STACK_STATUS="${STACK_STATUS}${SEVERITY}: nginx not running\n"
  fi

  if [[ "$RUNNING_CONTAINERS" != *"php7.3"* ]]; then
    STACK_STATUS="${STACK_STATUS}${SEVERITY}: php7.3 not running\n"
  fi

  if [[ "$STACK_STATUS" != "" ]]; then
    vout "$(echo -e "$STACK_STATUS")"

    # some things should not exit, e.g. `fulcrum conf`
    # otherwise you can get into a non-repairable situation
    if [[ "$EXIT_ON_ISSUE" == "exit" ]]; then
      exit 1
    fi
  else
    vout "Primary containers are running"
  fi
}

function haproxyrestart() {
  stackStatus "exit"

  # ensure we have no syntax errors
  $SUDOCK docker exec haproxy /usr/local/sbin/haproxy -f /etc/haproxy/haproxy.cfg -c 1>/dev/null 2>/dev/null
  if [ $? -gt 0 ]; then
    eout "FATAL: syntax error in HAProxy config it seems, quitting without restart"
  fi

  $SUDOCK docker kill -s HUP haproxy
  vout "HAProxy has been reloaded"
}

function varnishrestart() {
  stackStatus "exit"

  # ensure we have no syntax errors
  $SUDOCK docker exec varnish /usr/sbin/varnishd -C -f /etc/varnish/default.vcl 2>/dev/null
  if [ $? -gt 0 ]; then
    eout "FATAL: syntax error in varnish config it seems, quitting without restart"
  fi

  CFGNAME=varnish-cfg-$(date +"%Y%m%d%H%M%S")

  $SUDOCK docker exec varnish /usr/bin/varnishadm vcl.load $CFGNAME /etc/varnish/default.vcl
  if [ $? -gt 0 ]; then
    echo "FATAL: unable to vcl.load $CFGNAME"
    exit 1
  fi

  $SUDOCK docker exec varnish /usr/bin/varnishadm vcl.use $CFGNAME
  if [ $? -gt 0 ]; then
    echo "FATAL: unable to vcl.use $CFGNAME"
    exit 1
  fi

  vout "varnish has been reloaded"
}

function varnishcc() {
  stackStatus "exit"

  # ensure we have no syntax errors
  $SUDOCK docker exec varnish /usr/sbin/varnishd -C -f /etc/varnish/default.vcl 2>/dev/null
  if [ $? -gt 0 ]; then
    eout "FATAL: syntax error in varnish config it seems, quitting without restart"
  fi

  $SUDOCK docker exec varnish varnishadm "ban req.url ~ /"
  if [ $? -gt 0 ]; then
    echo "FATAL: unable to \"ban req.url ~ /\""
    exit 1
  fi

  vout "varnish cache has been cleared"
}

function drupalVersion() {
  D8FILE=${FULCRUM_DOCROOT}/core/lib/Drupal.php
  D7FILE=${FULCRUM_DOCROOT}/includes/bootstrap.inc
  D_FILE=${FULCRUM_DOCROOT}/modules/system/system.module

  if   [ -e $D8FILE ]; then
    echo "Checking $D8FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D8FILE|cut -d\' -f2)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D8FILE|cut -d\' -f2|cut -d. -f1)
  elif [ -e $D7FILE ]; then
    echo "Checking $D7FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D7FILE|cut -d\' -f4)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D7FILE|cut -d\' -f4|cut -d. -f1)
  elif [ -e $D_FILE ]; then
    echo "Checking $D_FILE"
    DRUPAL_FULL_VERSION=$( egrep "[ ']VERSION[ ']" $D_FILE|cut -d\' -f4)
    DRUPAL_MAJOR_VERSION=$(egrep "[ ']VERSION[ ']" $D_FILE|cut -d\' -f4|cut -d. -f1)
  else
    eout "Could not find files to determine Drupal version under $FULCRUM_DOCROOT"
  fi

  if [[ "$DRUPAL_MAJOR_VERSION" != "7" && "$DRUPAL_MAJOR_VERSION" != "8" ]]; then
      eout "Not compatible with Drupal version '$DRUPAL_MAJOR_VERSION' in $FULCRUM_DOCROOT!"
  fi

  vout "DRUPAL_MAJOR_VERSION: $DRUPAL_MAJOR_VERSION"
}
