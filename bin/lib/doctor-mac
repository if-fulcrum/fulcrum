#!/bin/bash

# functions to make sure that fulcrum hinge is healthy on the Mac

# set an alias for localhost so xdebug can transmit back the IDE
# https://forums.docker.com/t/accessing-host-machine-from-within-docker-container/14248/14
# sudo ifconfig lo0 remove 172.16.222.111  - to remove
if [ -z "$(ifconfig lo0 | grep 172.16.222.111)" ]; then
  sudo ifconfig lo0 alias 172.16.222.111
fi

# clean up old d4m-nfs
if [[ -e ~/repos/d4m-nfs ]]; then
  vout "Removing deprecated ~/repos/d4m-nfs"
  rm -rfv ~/repos/d4m-nfs
fi

if [[ -e ~/fulcrum/var/fulcrum/d4m-nfs ]]; then
  vout "Removing deprecated ~/fulcrum/var/fulcrum/d4m-nfs"
  rm -rfv ~/fulcrum/var/fulcrum/d4m-nfs
fi

TAPDIR=$(brew --prefix)/Library/Taps/homebrew
if [ ! -e $TAPDIR ]; then
  TAPDIR=$(brew --prefix)/Homebrew/Library/Taps/homebrew

  if [ ! -e $TAPDIR ]; then
    vout "ERROR: Cannot find Homebrew tap director, make sure Homebrew is installed correctly!"
    exit 1
  fi
fi

# kludge for Homebrew 0.9
if [[ ! "$TAPDIR" == *"Homebrew"* ]]; then
  SEDDIR=/usr/local/Library/ENV/4.3
  if [ ! -e $SEDDIR ]; then
    vout "Creating: $SEDDIR for homebrew sed workaround."
    sudo mkdir -p $SEDDIR
  else
    vout "Check: $SEDDIR homebrew workaround exists."
  fi

  SEDLINK=$SEDDIR/sed
  if [ ! -e $SEDLINK ]; then
    vout "Creating: $SEDLINK for homebrew sed workaround."
    sudo ln -s /usr/local/Library/Homebrew/shims/super/sed $SEDDIR/sed
  else
    vout "Check: $SEDLINK homebrew workaround exists."
  fi
fi

BREWLIST=$(brew list --formula)

if [[ ! "$BREWLIST" == *"php@7.3"* ]]; then
  vout "Installing: homebrew 'php' package."
  brew install php@7.3
else
  vout "Check: homebrew 'php' package is installed."
fi

if [[ ! "$BREWLIST" == *"brew-php-switcher"* ]]; then
  vout "Installing: homebrew 'brew-php-switcher' package."
  brew install brew-php-switcher
else
  vout "Check: homebrew 'brew-php-switcher' package is installed."
fi

# if we don't have /usr/local/bin/php setup yet, then do it now
if [ ! -e /usr/local/bin/php ]; then
  brew-php-switcher 7.3

  # rehash for the PATH var
  hash -r
fi

if [[ ! "$BREWLIST" == *"mysql-client"* ]]; then
  vout "Installing: homebrew 'mysql-client' package."
  brew install mysql-client
  brew link --force mysql-client
else
  vout "Check: homebrew 'mysql-client' package is installed."
fi

# install aws cli if needed/wanted
if ! (which aws > /dev/null); then
  vout "Installing aws"
  brew install awscli
  aws configure
fi

if ! (which composer > /dev/null); then
  brew install composer
fi

INITPHPVER=$(php -v|head -n 1|cut -d\  -f2|cut -d. -f1,2)

# lighter weight redis check
if [ ! -e /usr/local/lib/php/pecl/20180731/redis.so ]; then
  if [[ ! "$CURRPHPVER" == "7.3" ]]; then
    brew-php-switcher 7.3
  fi

  vout "Installing: pecl 'php 7.3 redis' package."
  printf "\n" | pecl install redis
fi

CURRPHPVER=$(php -v|head -n 1|cut -d\  -f2|cut -d. -f1,2)

# switch back to initial php version
if [[ ! "$CURRPHPVER" == "$INITPHPVER" ]]; then
  brew-php-switcher $INITPHPVER
fi

# stop apache in case previous installs had started it
if (ps auxwww|egrep '/usr/.*/*bin/httpd'|grep -v grep); then
  vout "Check: Stopping apache since it was started from some doctor action"
  sudo apachectl stop

  # stop auto start
  if [ -e /System/Library/LaunchDaemons/org.apache.httpd.plist ]; then
    vout "Check: Removing apache autostart since it was started from some doctor action"
    sudo launchctl unload -w /System/Library/LaunchDaemons/org.apache.httpd.plist 2>/dev/null
  fi
fi

# make sure exports exists
if [ ! -e /etc/exports ]; then
  vout "Creating /etc/exports"
  sudo touch /etc/exports
fi

NFSRESTART=0

# check if nfs conf line needs to be added
NFSCNF="nfs.server.mount.require_resv_port = 0"
if ! $(grep "$NFSCNF" /etc/nfs.conf > /dev/null 2>&1); then
  vout "Configuring $NFSCNF in /etc/nfs.conf"
  echo -e "\n$NFSCNF\n" | sudo tee -a /etc/nfs.conf

  NFSRESTART=1
fi

USER_DIR=/Users/$USER

# make macOS 10.15 compatible
if [[ -d /System/Volumes/Data$USER_DIR ]]; then
  USER_DIR=/System/Volumes/Data$USER_DIR
fi

# if we don't see proper nfs export then remake it
if ! $(egrep "^\"$USER_DIR\" -alldirs -mapall=0:0 localhost" /etc/exports > /dev/null 2>&1); then
  vout "Configuring /etc/exports"
  # grep out both < 10.15 and 10.15+ style to be safe
  grep -v "\"/Users/$USER\"" /etc/exports ; echo "\"$USER_DIR\" -alldirs -mapall=0:0 localhost" | sudo tee /etc/exports

  NFSRESTART=1
fi

# restart if we had to change any config
if [ "1" == "$NFSRESTART" ]; then
  vout "Restarting NFSd"
  # for some reason restart is not as kind
  sudo killall -9 nfsd ; sudo nfsd start
fi

if ! $(ps ax|grep nfsd|grep -v grep > /dev/null 2>&1); then
  vout "Starting NFSd"
  sudo nfsd start
fi

echo -n "[hinge] Wait until NFS is ready."
while ! rpcinfo -u 127.0.0.1 nfs > /dev/null 2>&1; do
  echo -n "."
  sleep .10
done
echo

if (which docker > /dev/null); then
  DOCKERVER=$(docker -v |cut -d" " -f3|cut -d. -f1)

  if [ "$DOCKERVER" -lt "18" ]; then
    vout "Removing Docker, needs upgrading"
    osascript -e 'quit app "Docker"'

    sudo rm -rf /Applications/Docker.app
  fi
fi

# see if we need to download docker
if ! (which docker > /dev/null); then
  vout "Can't find Docker downloading and installing"

  # get latest Docker version if it doesn't exist
  if [ ! -e ~/Downloads/Docker.dmg ]; then
    curl https://download.docker.com/mac/stable/Docker.dmg > ~/Downloads/Docker.dmg
  fi

  # mount DMG
  sudo hdiutil attach ~/Downloads/Docker.dmg

  # copy Docker to proper place
  sudo cp -fa /Volumes/Docker/Docker.app /Applications/

  # unmount DMG
  sudo hdiutil detach /Volumes/Docker

  # show docker in finder
  open -R /Applications/Docker.app
fi

# install jq if needed
if ( echo "$BREWLIST"|egrep '^jq$' > /dev/null ); then
  vout "Check: homebrew 'jq' package is installed."
  if ( echo |/usr/local/bin/jq ); then
    vout "Check: homebrew 'jq' package is functional."
  else
    vout "Re-Installing: homebrew 'jq' package."
    brew uninstall jq
    brew install jq
  fi
else
  vout "Installing: homebrew 'jq' package."
  brew install jq
fi

# install libjpeg if needed
if ( echo "$BREWLIST"|egrep '^jpeg$' > /dev/null ); then
  vout "Check: homebrew 'jpeg' package is installed."
  if ( /usr/local/bin/djpeg /usr/local/Homebrew/Library/Homebrew/test/support/fixtures/test.jpg > /dev/null ); then
    vout "Check: homebrew 'jpeg' package is functional."
  else
    vout "Re-Installing: homebrew 'jpeg' package."
    brew uninstall jpeg
    brew install jpeg
  fi
else
  vout "Installing: homebrew 'jpeg' package."
  brew install jpeg
fi

# open Docker if it is not already running
DOCKER_RUNNING=$(ps x|grep Docker.app/Contents/MacOS/Docker|grep -v grep)
if [ -z "$DOCKER_RUNNING" ]; then
  open -a /Applications/Docker.app

  echo -ne "\n[hinge] Wait until Docker is running."
  while ! $(docker run --rm hello-world > /dev/null 2>&1); do
    echo -n "."
    sleep .25
  done
  echo ""
fi

# setup some Docker for Mac settings
RESTART_DOCKER=0
DOCKER_SETTINGS=~/Library/Group\ Containers/group.com.docker/settings.json
DOCKER_SETTINGS_JSON="$(cat "$DOCKER_SETTINGS"|jq -M)"
FILESHARE_DIRS="$(echo "$DOCKER_SETTINGS_JSON"|jq -M .filesharingDirectories)"

# if there is not an array then make it
if [[ "$FILESHARE_DIRS" == "null" ]]; then
  vout "Configuration: Docker - new share of macOS /System/Volumes/Data/Users directory."
  RESTART_DOCKER=1
  DEFAULT_DIRS='"/System/Volumes/Data/Users", "/Users", "/Volumes", "/private", "/tmp"'
  DOCKER_SETTINGS_JSON=$(echo "$DOCKER_SETTINGS_JSON"|jq -M ". + {filesharingDirectories: [$DEFAULT_DIRS]}")
# make sure "/System/Volumes/Data/Users" is being shared
elif ( ! ( echo "$FILESHARE_DIRS"|grep '/System/Volumes/Data/Users' > /dev/null ) ); then
  vout "Configuration: Docker needs new share of macOS /System/Volumes/Data/Users directory."
  RESTART_DOCKER=1
  DOCKER_SETTINGS_JSON=$(echo "$DOCKER_SETTINGS_JSON"|jq -M '.filesharingDirectories += ["/System/Volumes/Data/Users"]')
fi

DOCKER_MEMORY="$(echo "$DOCKER_SETTINGS_JSON"|jq -M .memoryMiB)"

# make sure memory is set and high enough
if [[ "$DOCKER_MEMORY" == "null" || "$DOCKER_MEMORY" -lt 6144 ]]; then
  vout "Configuration: Docker setting memory allocation to 6GB."
  RESTART_DOCKER=1
  DOCKER_SETTINGS_JSON=$(echo "$DOCKER_SETTINGS_JSON"|jq -M ".memoryMiB = 6144")
fi

# if docker restart is needed and it is running then quit it and wait
if [[ "$RESTART_DOCKER" == "1" ]]; then
  vout "Configuration: Writing $DOCKER_SETTINGS"
  # write the file
  echo "$DOCKER_SETTINGS_JSON"|sed 's#/#\\/#g' > "$DOCKER_SETTINGS"

  # restart docker
  vout "Configuration: Quiting Docker"
  osascript -e 'quit app "Docker"'

  sleep 3

  vout "Configuration: Starting Docker again"

  # open Docker if it is not already running
  DOCKER_RUNNING=$(ps x|grep Docker.app/Contents/MacOS/Docker|grep -v grep)
  if [ -z "$DOCKER_RUNNING" ]; then
    open -a /Applications/Docker.app

    echo -ne "\n[hinge] Wait until Docker is running."
    while ! $(docker run --rm hello-world > /dev/null 2>&1); do
      echo -n "."
      sleep .25
    done
    echo ""
  fi
fi
